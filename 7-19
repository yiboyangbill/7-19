local composer = require( "composer" )

local scene = composer.newScene()
local physics = require( "physics" )

physics.start()
physics.setGravity( 0, 25 )
centerX = display.contentWidth * .5
centerY = display.contentHeight * .5

--physics.setDrawMode( "hybrid" )
local playerBullets = {}
local dPad
local upArrow
local downArrow
local leftArrow
local rightArrow = nill
local knight = nill
local ninja
local jumpButton
local shootButton
local backGroup
local mainGroup
local map = nill
local walkTimer


local function leftArrowHandle()
	transition.moveBy( knight, {
	 x = -50,
	 y = 0,
	 time = 0
	 } )

end

local function rightArrowHandle( )
	transition.moveBy( knight, {
	 x = 50,
	 y = 0,
	 time = 0
	 } )

end

local function onRightArrowTouch(event)
	knight.xScale = 1.17
	if (event.phase == "began") then
	
			knight.sequence = "walk"
			knight:setSequence( "walk" )
			knight:play()
			walkTimer = timer.performWithDelay(100, rightArrowHandle, 0 )

		
	elseif (event.phase =="ended") then
		
			knight.sequence = "idle"
			knight:setSequence("idle")
			knight:play()
			timer.cancel(walkTimer)
	end
	return true
end

local function onLeftArrowTouch(event)
	knight.xScale = -1.17
	if (event.phase == "began") then
	--if knight.sequence ~= "walk" then
			knight.sequence = "walk"
			knight:setSequence( "walk" )
			knight:play()
			walkTimer = timer.performWithDelay(100, leftArrowHandle, 0 )			
	--end
	elseif (event.phase =="ended") then
		--if knight.sequence ~= "idle" then
			knight.sequence = "idle"
			knight:setSequence("idle")
			knight:play()
			timer.cancel(walkTimer)
		--end
	end
	return true
end

local moveKnight = function(event)
	if knight.sequence == "run" then
		tranaition.moveBy( knight,{
			x = 10,
			y = 0,
			time = 0
		    })
	end
end

local function swapSheet()
	knight:setSequence( "idle" )
	knight:play()
	print("idle")
end
local function aSheet()
	ninja:setSequence( "dead" )
	ninja:play()
	ninja.isBodyActive = false
	print("Dead")
end
local function ninjaCollision( self, event )

	if ( event.phase == "began" ) then
    	print("collision began")

	elseif ( event.phase == "ended" ) then
    	print( "collision ended")
	end
end

function upArrowHandle()
	transition.moveBy( knight, {
    	 x = 0,
    	 y = -100,
    	 time = 100
    	 } )
end

local function downArrowHandle()
	transition.moveBy( knight, {
    	 x = 0,
    	 y = 50,
    	 time = 100
    	 } )

end

local function checkninjaPosition( event )
	if knight.y > display.contentHeight + 500 then
    	knight.x = display.contentCenterX
    	knight.y = display.contentCenterY
	end
end
local function jumpHandle()

	knight:setLinearVelocity( 0, -750 )
	
end
local function shoot(event)
	if (event.phase == "began") then
		
		knight:setSequence( "attack" )
		knight:play()
		local aSingleBullet = display.newImageRect(mainGroup, "Kunai.png",50,15 )
    	aSingleBullet.x = knight.x
    	aSingleBullet.y = knight.y
    	physics.addBody( aSingleBullet, 'dynamic',  { isSensor=true })
    	aSingleBullet.isBullet = true
    	aSingleBullet.gravityScale = 0
    	aSingleBullet.id = "bullet"
		--aSingleBullet:setLinearVelocity( 500, 0 )
		
		table.insert(playerBullets,aSingleBullet)
		transition.to( aSingleBullet, { x=display.contentWidth + 1000, time=1500})
    	print("# of bullet: " .. tostring(#playerBullets))
	
	elseif (event.phase =="ended") then
		
			knight:setSequence("idle")
			knight:play()
		
	end
	return true
end
local function checkPlayerBulletsOutOfBounds()
	local bulletCounter
	if #playerBullets > 0 then
    	for bulletCounter = #playerBullets, 1 ,-1 do
        	if playerBullets[bulletCounter].x > display.contentWidth+1000 then
            	playerBullets[bulletCounter]:removeSelf()
            	playerBullets[bulletCounter] = nil
            	table.remove(playerBullets, bulletCounter)
            	print("remove bullet")
        	end
    	end
	end
end
local function checkCharacterPosition( event )
    if knight.y > display.contentHeight + 500 then
        knight.x = display.contentCenterX - 200
        knight.y = display.contentCenterY
    end
end
local function onCollision( event )

	if ( event.phase == "began" ) then
    	local obj1 = event.object1
    	local obj2 = event.object2
    	local whereCollisonOccurredX = obj1.x
    	local whereCollisonOccurredY = obj1.y
		print("Object touched is: ")
		print(obj1.id)
		print("other object touched is:")
		print(obj2.id)
    	if ( ( obj1.id == "ninja" and obj2.id == "bullet" ) or
         	( obj1.id == "bullet" and obj2.id == "ninja" ) ) then
         	local bulletCounter = nil
			print (#playerBullets)
        	for bulletCounter = #playerBullets, 1, -1 do
				print("BULLETS AWAY")
            	if ( playerBullets[bulletCounter] == obj1 or playerBullets[bulletCounter] == obj2 ) then
                	playerBullets[bulletCounter]:removeSelf()
                	playerBullets[bulletCounter] = nil
                	table.remove( playerBullets, bulletCounter )
                	break
            	end
			end
			
				local emitterParams = {
					startColorAlpha = 1,
					startParticleSizeVariance = 250,
					startColorGreen = 0.3031555,
					yCoordFlipped = -1,
					blendFuncSource = 770,
					rotatePerSecondVariance = 153.95,
					particleLifespan = 0.7237,
					tangentialAcceleration = -1440.74,
					finishColorBlue = 0.3699196,
					finishColorGreen = 0.5443883,
					blendFuncDestination = 1,
					startParticleSize = 400.95,
					startColorRed = 0.8373094,
					textureFileName = "fire.png",
					startColorVarianceAlpha = 1,
					maxParticles = 256,
					finishParticleSize = 540,
					duration = 0.25,
					finishColorRed = 1,
					maxRadiusVariance = 72.63,
					finishParticleSizeVariance = 250,
					gravityy = -671.05,
					speedVariance = 90.79,
					tangentialAccelVariance = -420.11,
					angleVariance = -142.62,
					angle = -244.11
				}
				local emitter = display.newEmitter( emitterParams )
				emitter.x = whereCollisonOccurredX
				emitter.y = whereCollisonOccurredY
				timer.performWithDelay( 500, aSheet )

			
        
    	end
	end
end
function scene:create( event )
	local sceneGroup = self.view
	-- Code here runs when the scene is first created but has not yet appeared on screen

	physics.pause()  -- Temporarily pause the physics engine
	backGroup = display.newGroup()  -- Display group for the background image
	sceneGroup:insert( backGroup )  -- Insert into the scene's view group

	mainGroup = display.newGroup()  
	sceneGroup:insert( mainGroup )  -- Insert into the scene's view group
	local theGround = display.newImageRect(backGroup,"land.png", 1024,128 )
	
	theGround.x = display.contentCenterX
	theGround.y = display.contentHeight 
	theGround.id = "the ground"
	physics.addBody( theGround, "static", {
		friction = 0.5,
		bounce = 0.3
		} )
	
	local theGround2 = display.newImage( "land.png" )
    theGround2.x = 1520
    theGround2.y = display.contentHeight
    theGround2.id = "the ground"
    physics.addBody( theGround2, "static", { 
    friction = 0.5, 
    bounce = 0.3 
	} )
	dPad = display.newImageRect(backGroup, "d-pad.png", 100, 100 )
	--sceneGroup:insert(dPad)
	dPad.x = 50
	dPad.y = display.contentHeight -30
	dPad.id = "d-pad"
	upArrow = display.newImageRect(mainGroup, "upArrow.png", 30, 20 )
	--sceneGroup:insert(upArrow)
	upArrow.x = 50
	upArrow.y = display.contentHeight - 65
	upArrow.id = "up arrow"
	downArrow = display.newImageRect( mainGroup,"downArrow.png", 30,20 )
	downArrow.x = 50
	downArrow.y = display.contentHeight + 5
	downArrow.id = "down arrow"
	leftArrow = display.newImageRect( mainGroup,"leftArrow.png", 20, 30 )
	leftArrow.x =15
	leftArrow.y = display.contentHeight - 30
	leftArrow.id = "left arrow"
	rightArrow = display.newImageRect( mainGroup, "rightArrow.png", 20,30 )
	rightArrow.x = 85
	rightArrow.y = display.contentHeight - 30
	rightArrow.id = "right arrow"

	local sheetOptionKnight =
	{
		width = 881/5,
		height = 424/2,
		numFrames = 10
	}

	local sheetKnight = graphics.newImageSheet( "knightIdle.png", sheetOptionKnight )

	local sheetOptionsWalk =
	{
		width = 1057/6,
		height = 424/2,
		numFrames = 10
	}
	local sheetWalkingKnight = graphics.newImageSheet( "knightWalking.png", sheetOptionsWalk )
	local sheetAttackingKnight = graphics.newImageSheet( "knightAttack.png", sheetOptionsWalk )
	local sequence_data = {
		{
			name = "idle",
			start = 1,
			count = 10,
			time = 800,
			loopCount = 0,
			sheet = knight
		},
		{
			name = "walk",
			start = 1,
			count = 10,
			time = 800,
			loopCount = 0,
			sheet = sheetWalkingKnight
		},
		{
			name = "attack",
			start = 1,
			count = 10,
			time = 800,
			loopCount = 0,
			sheet =  sheetAttackingKnight
		}
	}
	knight = display.newSprite( mainGroup, sheetKnight, sequence_data )
	knight.x = centerX - 100
	knight.y = centerY - 10

	knight.id = "knight"
	knight.xScale = 1.17
	knight.yScale = 1.17
	physics.addBody( knight, "dynamic", {
		density = 3.0,
		friction = 0.5,
		bounce = 0.3
		} )

		local sheetOptionsninja =
		{
			width = 232/4,
			height = 329/3,
			numFrames = 10
		}
		local sheetIdleNinja = graphics.newImageSheet( "ninjaBoyIdle.png", sheetOptionsninja )
		local sheetOptionsDead =
		{
			width = 482/4,
			height = 374/3,
			numFrames = 10
		}
		local sheetDeadNingninja = graphics.newImageSheet(  "ninjaBoyDead.png", sheetOptionsDead )

		local sequence_data = {
			{
				name = "ninjaBoy",
				start = 1,
				count = 10,
				time = 800,
				loopCount = 0,
				sheet = sheetIdleNinja
			},
			{
				name = "dead",
				start = 1,
				count = 10,
				time = 800,
				loopCount = 1,
				sheet = sheetDeadNingninja
			}
		}
		ninja = display.newSprite( mainGroup, sheetIdleNinja, sequence_data )
		ninja.x = centerX + 100
		ninja.y = centerY + 40
		ninja.id="ninja"
		ninja.xScale = 1.0
		ninja.yScale = 1.0
		physics.addBody( ninja, "dynamic", {
			density = 3.0,
			friction = 0.5,
			bounce = 0.3
			} )
		
			
	jumpButton = display.newImageRect(mainGroup, "jumpButton.png" ,40,40)
	jumpButton.x = 150
	jumpButton.y = display.contentHeight - 30
	jumpButton.id = "jump button"
	jumpButton.alpha = 0.5
	shootButton = display.newImageRect(mainGroup, "jumpButton.png" ,30,30)
	shootButton.x = 50
	shootButton.y = display.contentHeight - 30
	shootButton.id = "shoot button"
	shootButton.alpha = 0.5

	upArrow:addEventListener( "tap", upArrowHandle )
	downArrow:addEventListener( "tap", downArrowHandle )
	leftArrow:addEventListener( "touch", onLeftArrowTouch )
	rightArrow:addEventListener( "touch", onRightArrowTouch)
	--rightArrow:addEventListener( "tap", rightArrowHandle )
	jumpButton:addEventListener( "tap", jumpHandle )
    Runtime:addEventListener( "enterFrame", checkCharacterPosition )
	shootButton:addEventListener( "touch", shoot )

end

-- show()
function scene:show( event )

	local sceneGroup = self.view
	local phase = event.phase

	if ( phase == "will" ) then
		-- Code here runs when the scene is still off screen (but is about to come on screen)
	elseif ( phase == "did" ) then
		-- Code here runs when the scene is entirely on screen
		physics.start()
		Runtime:addEventListener( "collision", onCollision )
		Runtime:addEventListener( "enterFrame", checkPlayerBulletsOutOfBounds )
		knight:play()
		timer.performWithDelay( 2250, swapSheet )
		ninja:play()
		--Runtime:addEventListener( "enterFrame", moveKnight )
	end
end
-- hide()
function scene:hide( event )

	local sceneGroup = self.view
	local phase = event.phase

	if ( phase == "will" ) then
		-- Code here runs when the scene is on screen (but is about to go off screen)
        

	elseif ( phase == "did" ) then
		-- Code here runs immediately after the scene goes entirely off screen
		--rightArrow:addEventListener( "touch", onRightArrowTouch )
		--Runtime:addEventListener( "enterFrame", moveKnight )
		Runtime:removeEventListener( "enterFrame", checkPlayerBulletsOutOfBounds )
		Runtime:removeEventListener( "collision", onCollision )
		physics.pause()
		composer.removeScene( "game" )
	end
end


-- destroy()
function scene:destroy( event )

	local sceneGroup = self.view
	-- Code here runs prior to the removal of scene's view

end


-- -----------------------------------------------------------------------------------
-- Scene event function listeners
-- -----------------------------------------------------------------------------------
scene:addEventListener( "create", scene )
scene:addEventListener( "show", scene )
scene:addEventListener( "hide", scene )
scene:addEventListener( "destroy", scene )
-- -----------------------------------------------------------------------------------

return scene
